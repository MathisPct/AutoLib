@page "/Login"
@using BlazorApp.Dto
@using BlazorApp.Middleware
@using BlazorApp.Models.Domain
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject SignInManager<Client> SignInManager
@inject UserManager<Client> UserManager

<h1>Se connecter</h1>

<EditForm Model="@_loginData" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    
    <div class="form-group">
        <label for="prenom">Email</label>
        <InputText id="prenom" class="form-control" @bind-Value="_loginData.Email"></InputText>
    </div>
    
    <div class="form-group">
        <label for="password">Mot de passe</label>
        <InputText type="password" id="password" class="form-control" @bind-Value="_loginData.Password"></InputText>
    </div>
    
    <button type="submit" class="btn btn-primary">Se connecter</button>
    
    @if (_errorMessage != null)
    {
        <div class="alert alert-danger mt-3">@_errorMessage</div>
    }
</EditForm>

@code {
    private LoginData _loginData = new();
    private string _errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var user = await UserManager.FindByEmailAsync(_loginData.Email) ?? throw new Exception("User pas trouvé");
            if (await SignInManager.CanSignInAsync(user))
            {
                var result = await SignInManager.CheckPasswordSignInAsync(user, _loginData.Password, false);
                if (result.Succeeded)
                {
                    Guid key = Guid.NewGuid();
                    BlazorCookieLoginMiddleware.Logins[key] = new LoginInfo { Email = _loginData.Email, Password = _loginData.Password };
                    NavigationManager.NavigateTo($"/login?key={key}", true);
                }
                else
                {
                    _errorMessage = "Mot de passe incorrect";
                }
            }
            else
            {
                _errorMessage = "Votre compte est bloqué";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
}