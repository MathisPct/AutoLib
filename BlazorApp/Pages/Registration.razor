@page "/register"
@using BlazorApp.Dto
@using BlazorApp.Models.Domain
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject UserManager<Client> UserManager

<h1>S'enregistrer</h1>
<EditForm Model="@_userRegistration" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="Prenom">Prénom: </label>
        <InputText id="Prenom" class="form-control" @bind-Value="_userRegistration.Prenom"/>
        <ValidationMessage For="@(() => _userRegistration.Prenom)"/>
    </div>

    <div class="form-group">
        <label for="Nom">Nom: </label>
        <InputText id="Nom" class="form-control" @bind-Value="_userRegistration.Nom"/>
        <ValidationMessage For="@(() => _userRegistration.Nom)"/>
    </div>

    <div class="form-group">
        <label for="DateNaissance">Date d'anniversaire</label>
        <InputDate id="DateNaissance" class="form-control" @bind-Value="_userRegistration.DateNaissance"/>
        <ValidationMessage For="@(() => _userRegistration.DateNaissance)"/>
    </div>

    <div class="form-group">
        <label for="Password">Mot de passe</label>
        <InputText type="password" id="Password" class="form-control" @bind-Value="_userRegistration.Password"/>
        <ValidationMessage For="@(() => _userRegistration.Password)"/>
    </div>

    <div class="form-group">
        <label for="ConfirmPassword">Confirmer votre mot de passe</label>
        <InputText type="password" id="ConfirmPassword" class="form-control" @bind-Value="_userRegistration.ConfirmPassword"/>
        <ValidationMessage For="@(() => _userRegistration.ConfirmPassword)"/>
    </div>

    <div class="signin-container">
        <button style="margin-top: 20px" type="submit" class="btn btn-primary">S'enregistrer</button>
    </div>
    @if (_errorMessage != null)
    {
        <div class="alert alert-danger mt-3">@_errorMessage</div>
    }
</EditForm>

@code {
    private UserRegistration _userRegistration = new();
    
    protected override void OnInitialized()
    {
        _userRegistration = new UserRegistration()
        {
            MinLengthPassword = UserManager.Options.Password.RequiredLength,
            RequireNonAlphaNumeric = UserManager.Options.Password.RequireNonAlphanumeric,
            RequireDigit = UserManager.Options.Password.RequireDigit,
        };
    }
    
    private string _errorMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            var user = new Client()
            {
                UserName = _userRegistration.Prenom,
                Prenom = _userRegistration.Prenom,
                Nom = _userRegistration.Nom,
                DateNaissance = _userRegistration.DateNaissance,
                Email = _userRegistration.Prenom
            };
            var identityResult = await UserManager.CreateAsync(user, _userRegistration.Password);
            if (identityResult.Succeeded == false)
            {
                foreach (var identityResultError in identityResult.Errors)
                {
                }
            }
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            _errorMessage = ex.Message;
        }
    }
}