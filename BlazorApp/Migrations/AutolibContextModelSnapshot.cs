// <auto-generated />
using System;
using BlazorApp.Models.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorApp.Migrations
{
    [DbContext(typeof(AutolibContext))]
    partial class AutolibContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BlazorApp.Models.Domain.Borne", b =>
                {
                    b.Property<int>("IdBorne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdStation")
                        .HasColumnType("int");

                    b.Property<int?>("IdVehicule")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdBorne");

                    b.HasIndex("IdStation");

                    b.HasIndex("IdVehicule");

                    b.ToTable("Borne");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateNaissance")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Reservation", b =>
                {
                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("VehiculeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DateReservation", "ClientId", "VehiculeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehiculeId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Station", b =>
                {
                    b.Property<int>("IdStation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasColumnType("longtext");

                    b.Property<int?>("CodePostal")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .HasColumnType("longtext");

                    b.HasKey("IdStation");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.TypeVehicule", b =>
                {
                    b.Property<int>("IdTypeVehicule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IdTypeVehicule");

                    b.ToTable("TypeVehicule");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.UtilisationVehicule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("BorneArrivee")
                        .HasColumnType("int");

                    b.Property<int>("BorneDepart")
                        .HasColumnType("int");

                    b.Property<int>("Client")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IdVehicule")
                        .HasColumnType("int");

                    b.Property<int>("Vehicule")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BorneArrivee");

                    b.HasIndex("BorneDepart");

                    b.HasIndex("IdVehicule");

                    b.ToTable("UtilisationVehicule");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Vehicule", b =>
                {
                    b.Property<int>("IdVehicule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Disponibilite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("EtatBatterie")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeVehicule")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rfid")
                        .HasColumnType("int");

                    b.HasKey("IdVehicule");

                    b.HasIndex("IdTypeVehicule");

                    b.ToTable("Vehicule");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Borne", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.Station", "StationNavigation")
                        .WithMany("Bornes")
                        .HasForeignKey("IdStation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp.Models.Domain.Vehicule", "Vehicule")
                        .WithMany("Bornes")
                        .HasForeignKey("IdVehicule");

                    b.Navigation("StationNavigation");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Reservation", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.Client", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp.Models.Domain.Vehicule", "Vehicule")
                        .WithMany("Reservations")
                        .HasForeignKey("VehiculeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.UtilisationVehicule", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.Borne", "BorneArriveeNavigation")
                        .WithMany("UtiliseBorneArriveeNavigations")
                        .HasForeignKey("BorneArrivee");

                    b.HasOne("BlazorApp.Models.Domain.Borne", "BorneDepartNavigation")
                        .WithMany("UtiliseBorneDepartNavigations")
                        .HasForeignKey("BorneDepart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp.Models.Domain.Client", "ClientNavigation")
                        .WithMany("Utilises")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp.Models.Domain.Vehicule", "VehiculeNavigation")
                        .WithMany("Utilises")
                        .HasForeignKey("IdVehicule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorneArriveeNavigation");

                    b.Navigation("BorneDepartNavigation");

                    b.Navigation("ClientNavigation");

                    b.Navigation("VehiculeNavigation");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Vehicule", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.TypeVehicule", "TypeVehiculeNavigation")
                        .WithMany("Vehicules")
                        .HasForeignKey("IdTypeVehicule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeVehiculeNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorApp.Models.Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlazorApp.Models.Domain.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Borne", b =>
                {
                    b.Navigation("UtiliseBorneArriveeNavigations");

                    b.Navigation("UtiliseBorneDepartNavigations");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Client", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Utilises");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Station", b =>
                {
                    b.Navigation("Bornes");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.TypeVehicule", b =>
                {
                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("BlazorApp.Models.Domain.Vehicule", b =>
                {
                    b.Navigation("Bornes");

                    b.Navigation("Reservations");

                    b.Navigation("Utilises");
                });
#pragma warning restore 612, 618
        }
    }
}
